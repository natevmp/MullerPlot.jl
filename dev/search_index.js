var documenterSearchIndex = {"docs":
[{"location":"#MullerPlot.jl-Documentation","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"","category":"section"},{"location":"#Example-usage","page":"MullerPlot.jl Documentation","title":"Example usage","text":"","category":"section"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"First we load population size and parental relationship data.","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"using CSV, DataFrames\n\nn_t_vid = CSV.File(\"data/dataMullerplot_sizes.csv\", header=false) |> Tables.matrix\nparentVid_vid = CSV.File(\"data/dataMullerplot_parentLineage.csv\", header=false) |> Tables.matrix |> vec\ntBirth_vid = CSV.File(\"data/dataMullerplot_arrivalTimes.csv\", header=false) |> Tables.matrix |> vec","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"To use the package functionality, the input data has several requirements. n_t_vid must be a matrix of clone sizes, where the first dimension is indexed by the time points at which the sizes are measured, and the second by the different clones. Each clone in the system is designated an integer id that coincides with its index in any array indexing over the different clones:","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"|n_t_vid|  clone 1   |  clone 2   |  clone 3   | ... | |-| ––––– | ––––– | ––––– |––-| |t_1| n_1(t_1) | n_2(t_1) | n_3(t_1) |... |t_2| n_1(t_2) | n_2(t_2) | n_3(t_2) |... |t_3| n_1(t_3) | n_2(t_3) | n_3(t_3) |... |...| ... | ... | ... |...","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"Clone sizes n_i(t) should be specified as a fraction of the total population size and exclude any subclones, so that forall j  sum_i n_i(t_j) = 1. ","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"parentVid_vid is a vector indexed by the different clone id's, containing the id (/index) of the clone's direct parent.  For example, parentVid_vid[5] returns the id/index of the parent of the clone at index 5. All clones that do not have direct parent in the system, or who's direct parent is the wild type, should be given the parent with id 0.","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"Next we create bounds for plotting each clone.","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"using MullerPlot\n\nxL_t_vid, xU_t_vid = mullerBounds(n_t_vid, parentVid_vid)","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"The method mullerBounds(...) returns two matrices containing the coordinates of respectively the upper and lower bounds of each clone (newly arising population) in the population. The first dimension of these  matrices indexes the measurement times (typically the x-axis of a Muller plot), and the second the different clones. For example xL_t_vid[:,5] is a vector containing the size-axis coordinate (usually the y-axis) of the lower bound of the 5th clone at all timepoints, and xL_t_vid[5,:] is a vector containing the size-axis coordinates of all clones at the 5th timepoint.","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"It is also possible to select only a subset of clones for the plot, using a boolean vector as third argument. For example, if we wish to only show clones that consist of at least 1% of the population at the final measurement time:","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"visible_vid = n_t_vid[end,:] .> 0.01\nxL_t_vid, xU_t_vid = MullerPlot.mullerBounds(n_t_vid, parentVid_vid, visible_vid)","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"Now we use the Makie.jl package to construct the plot.","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"_t = range(0,100,length=size(n_t_vid,1)) # set equidistant measurement times\n\nusing CairoMakie\n\nfig = Figure(size=(800,600), fontsize=25)\nAxis(\n    fig[1,1],\n    backgroundcolor=:grey75,\n    xgridvisible=false,\n    ygridvisible=false,\n    yticksvisible=false,\n    yticklabelsvisible=false,\n    xticks=[0,25,50,75,100],\n    xlabel=\"time\",\n)\nfor i in 2:size(xL_t_vid,2) # the first index is the wild type\n    band!(\n        _t, xL_t_vid[:,i], xU_t_vid[:,i],\n    )\n    scatter!(\n        tBirth_vid[visible_vid][i],\n        xU_t_vid[Int(round(tBirth_vid[visible_vid][i]))+1, i],\n        markersize=15,\n        marker=:star4,\n    )\n    println(tBirth_vid[i])\nend\nylims!(0,1)\nxlims!(0,100)\ndisplay(fig)","category":"page"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"CurrentModule = MullerPlot","category":"page"},{"location":"#Module-Index","page":"MullerPlot.jl Documentation","title":"Module Index","text":"","category":"section"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"Modules = [MullerPlot]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"#Detailed-API","page":"MullerPlot.jl Documentation","title":"Detailed API","text":"","category":"section"},{"location":"","page":"MullerPlot.jl Documentation","title":"MullerPlot.jl Documentation","text":"Modules = [MullerPlot]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"#MullerPlot.buildFamilyArray-Tuple{Vector{T} where T<:Integer}","page":"MullerPlot.jl Documentation","title":"MullerPlot.buildFamilyArray","text":"buildFamilyArray(parentVid_vid)\n\nCreate a vector vid_child_Vid, indexed by the variant id's vid, that has as elements the children of each variant stored as a vector of id's. For example, vid_child_Vid[5] is a vector vid_child whose elements are the vid's of the children of the variant with vid=5.\n\nparentVid_vid:    Vector indexed by the variant id's vid, where each element refers to that variant's parent vid. For example parentVid_vid[5] is the vid of the parent of the variant with vid=5.\n\n\n\n\n\n","category":"method"},{"location":"#MullerPlot.getLowerCoordinateFromParent-NTuple{5, Any}","page":"MullerPlot.jl Documentation","title":"MullerPlot.getLowerCoordinateFromParent","text":"getLowerCoordinateFromParent(parent, xL_vid, xU_vid, n_vid, vid_child_Vid)\n\nGet y-axis coordinate for the lower bound of all child clones of a parent clone.\n\nparent:   variant id (vid) of parent clone \nxL_vid:   vector of lower bounds in draw space indexed by variant id's (vid) \nxU_vid:   vector of upper bounds in draw space indexed by variant id's (vid) \nn_vid:    vector of clone sizes indexed by variant id \nvid_child_Vid: vector (indexed by variant id) where each element is a vector of that variant's children (given as their variant id's)\n\n\n\n\n\n","category":"method"},{"location":"#MullerPlot.mullerBounds-Tuple{AbstractMatrix{T} where T<:Real, Array{Vector{V}, 1} where V<:Integer}","page":"MullerPlot.jl Documentation","title":"MullerPlot.mullerBounds","text":"mullerBounds(n_t_vid, vid_child_Vid)\n\nReturn lower and upper bounds xL_t_vid and xU_t_vid of variant bands for creating a Muller plot.\n\nn_t_vid: two dimensional Array whose elements are variant clone sizes. The first dimension _t is the timepoints at which the measurements occured; the second dimension _vid identifies the variant (i.e. the variant id). The first index refers to the wild type. \nvid_child_Vid: A nested array indexed by the variant id's. Its elements are 1D Vectors which contain the variant id's of each variant's children.\n\n\n\n\n\n","category":"method"},{"location":"#MullerPlot.sizeVariantRec-Tuple{Integer, AbstractVector{<:Float64}, AbstractArray{<:AbstractArray{<:Integer}}}","page":"MullerPlot.jl Documentation","title":"MullerPlot.sizeVariantRec","text":"sizeVariantRec(vid, n_vid, vid_child_Vid)\n\nGet combined size of all child clones of a variant.\n\nvid:            variant id of parent \nn_vid:          vector of clone sizes indexed by variant id \nvid_child_Vid:  vector (indexed by variant id) where each element is a vector of that variant's children (given as their variant id's)\n\n\n\n\n\n","category":"method"},{"location":"#MullerPlot.variantBirthTimes-Tuple{AbstractMatrix{<:Real}}","page":"MullerPlot.jl Documentation","title":"MullerPlot.variantBirthTimes","text":"variantBirthTimes(n_t_vid)\n\nGet the arrival (birth) times of each clone in the system\n\n\n\n\n\n","category":"method"}]
}
